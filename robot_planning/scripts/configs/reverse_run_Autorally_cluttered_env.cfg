[cbf_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = cbf_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = cbf_mppi_controller

[cbf_inefficient_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = cbf_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = cbf_inefficient_mppi_controller

[cbf_no_soft_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = cbf_no_soft_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = cbf_no_soft_mppi_controller

[ncbf_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = ncbf_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = ncbf_mppi_controller

[ncbf_inefficient_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = ncbf_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = ncbf_inefficient_mppi_controller

[ncbf_no_soft_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = ncbf_no_soft_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = ncbf_no_soft_mppi_controller

[baseline_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = baseline_cost_evaluator
dynamics = sim_dynamics1
steps_per_action = 1
controller = baseline_mppi_controller

[risk_aware_agent]
type = simulated_robot
data_type = numpy
start_state = [0.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, -2.0]
cost_evaluator = baseline_cost_evaluator
dynamics = disturbed_sim_dynamics
steps_per_action = 1
controller = risk_aware_mppi_controller

[logger]
type = Autorally_npz_logger
experiment_name = autorally
batch_code = 0
goal_checker = my_goal_checker_for_checking_vehicle_position
collision_checker = my_collision_checker_for_collision
num_states = 11

[cbf_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = cbf_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = cbf_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[cbf_inefficient_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = cbf_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = cbf_inefficient_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[cbf_no_soft_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = cbf_no_soft_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = cbf_no_soft_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[ncbf_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = ncbf_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = ncbf_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[ncbf_inefficient_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = ncbf_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = ncbf_inefficient_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[ncbf_no_soft_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = ncbf_no_soft_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
repair_horizon = 4
;repair_steps = 0
repair_steps = 4
stochastic_trajectories_sampler = ncbf_no_soft_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[baseline_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = baseline_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
stochastic_trajectories_sampler = baseline_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[risk_aware_mppi_controller]
type = MPPI
dynamics = ctrl_dynamics1
cost_evaluator = baseline_cost_evaluator
control_dim = 2
inverse_temperature = 1
control_horizon = 20
stochastic_trajectories_sampler = risk_aware_stochastic_trajectories_sampler
min_controls = [-1.0, -0.1]
max_controls = [1.0, 0.4]

[cbf_stochastic_trajectories_sampler]
type = MPPI_CBF_stochastic_trajectories_sampler
efficient_sampling = True
number_of_processes = 12
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[cbf_inefficient_stochastic_trajectories_sampler]
type = MPPI_CBF_stochastic_trajectories_sampler
efficient_sampling = False
number_of_processes = 12
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[cbf_no_soft_stochastic_trajectories_sampler]
type = MPPI_CBF_stochastic_trajectories_sampler
efficient_sampling = True
number_of_processes = 12
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[ncbf_stochastic_trajectories_sampler]
type = MPPI_NCBF_stochastic_trajectories_sampler
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[ncbf_inefficient_stochastic_trajectories_sampler]
type = MPPI_NCBF_inefficient_stochastic_trajectories_sampler
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[ncbf_no_soft_stochastic_trajectories_sampler]
type = MPPI_NCBF_stochastic_trajectories_sampler
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[baseline_stochastic_trajectories_sampler]
type = MPPI_stochastic_trajectories_sampler
number_of_processes = 12
number_of_trajectories = 1000
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1

[risk_aware_stochastic_trajectories_sampler]
type = RAMPPI_stochastic_trajectories_sampler
number_of_processes = 12
number_of_trajectories = 100
number_of_cvar_trajectories = 100
uncontrolled_trajectories_portion = 0.0
noise_sampler = my_noise_sampler1
confidence_level = 0.9
cvar_weight = 1.0
dynamics = disturbed_ctrl_dynamics

[my_noise_sampler1]
type = gaussian_noise_sampler
mean = [0, 0]
covariance = [[1.0, 0], [0, 1.0]]
seed = 12345

[disturbed_ctrl_dynamics]
type = autorally_dynamics_cartesian
state_dependent_noise = True
track_width_for_noise_covariance_change = 0.5
close_to_boundary_noise_covariance_multiplier = 3
noise_covariance = [0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.01, 0.01]
delta_t = 0.1
m = 21.7562
iz = 1.124
lf = 0.34
lfr = 0.57
iwf = 0.1
iwr = 0.0373
rf = 0.095
rr = 0.090
h = 0.12
tire_b = 4.0
tire_c = 1.0
tire_d = 1.0
ksteering = -0.24
csteering = -0.02
throttle_factor = 0.45
steering_factor = 1.0
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz

[disturbed_sim_dynamics]
type = autorally_dynamics_cartesian
state_dependent_noise = True
track_width_for_noise_covariance_change = 0.5
close_to_boundary_noise_covariance_multiplier = 3
noise_covariance = [0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.01, 0.01]
delta_t = 0.1
m = 21.7562
iz = 1.124
lf = 0.34
lfr = 0.57
iwf = 0.1
iwr = 0.0373
rf = 0.095
rr = 0.090
h = 0.12
tire_b = 4.0
tire_c = 1.0
tire_d = 1.0
ksteering = -0.24
csteering = -0.02
throttle_factor = 0.45
steering_factor = 1.0
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz

[ctrl_dynamics1]
type = autorally_dynamics_cartesian
delta_t = 0.1
m = 21.7562
iz = 1.124
lf = 0.34
lfr = 0.57
iwf = 0.1
iwr = 0.0373
rf = 0.095
rr = 0.090
h = 0.12
tire_b = 4.0
tire_c = 1.0
tire_d = 1.0
ksteering = -0.24
csteering = -0.02
throttle_factor = 0.45
steering_factor = 1.0
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz

[sim_dynamics1]
type = autorally_dynamics_cartesian
delta_t = 0.1
m = 21.7562
iz = 1.124
lf = 0.34
lfr = 0.57
iwf = 0.1
iwr = 0.0373
rf = 0.095
rr = 0.090
h = 0.12
tire_b = 4.0
tire_c = 1.0
tire_d = 1.0
ksteering = -0.24
csteering = -0.02
throttle_factor = 0.45
steering_factor = 1.0
friction_nn_path = ''
throttle_nn_path = environment/dynamics/autorally_dynamics/throttle_model1.pth
track_path = environment/dynamics/autorally_dynamics/ccrf_track_optimal.npz
throttle_nn_file_name = throttle_model1.pth
track_file_name = ccrf_track_optimal.npz
hybrid_nn = hybrid_net_ar2.pth
carsim_simfile = carsim_simfile.sim
carsim_dll = vs_solvers/Linux/CarSim/lib64/libcarsim.so.2020.1

[cbf_cost_evaluator]
type = autorally_mppi_cbf_cost_evaluator
include_cbf_cost = True
collision_cost = 1000
cbf_alpha = 0.9
barrier_net = my_barrier_net
q = [50.0, 3.0, 0.1, 0.0, 0.0, 0.0, 30.0, 0.0]
qn = [50.0, 100.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0]
r = [0.0, 0.0]
goal_checker = my_goal_checker_for_tracking
collision_checker = my_collision_checker_for_collision

[cbf_no_soft_cost_evaluator]
type = autorally_mppi_cbf_cost_evaluator
include_cbf_cost = False
collision_cost = 1000
cbf_alpha = 0.9
barrier_net = my_barrier_net
q = [50.0, 3.0, 0.1, 0.0, 0.0, 0.0, 30.0, 0.0]
qn = [50.0, 100.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0]
r = [0.0, 0.0]
goal_checker = my_goal_checker_for_tracking
collision_checker = my_collision_checker_for_collision

[my_barrier_net]
type = barrier_nn
collision_checker = my_collision_checker_for_collision
obstacles_cbf_coefficient = 1
obstacles = False

[ncbf_cost_evaluator]
type = autorally_mppi_ncbf_cost_evaluator
include_cbf_cost = True
collision_cost = 1000
q = [50.0, 3.0, 0.1, 0.0, 0.0, 0.0, 30.0, 0.0]
qn = [50.0, 100.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0]
r = [0.0, 0.0]
goal_checker = my_goal_checker_for_tracking
collision_checker = my_collision_checker_for_collision

[ncbf_no_soft_cost_evaluator]
type = autorally_mppi_ncbf_cost_evaluator
include_cbf_cost = False
collision_cost = 1000
q = [50.0, 3.0, 0.1, 0.0, 0.0, 0.0, 30.0, 0.0]
qn = [50.0, 100.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0]
r = [0.0, 0.0]
goal_checker = my_goal_checker_for_tracking
collision_checker = my_collision_checker_for_collision

[baseline_cost_evaluator]
type = autorally_mppi_cost_evaluator
collision_cost = 1000
q = [50.0, 3.0, 0.1, 0.0, 0.0, 0.0, 30.0, 0.0]
qn = [50.0, 100.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0]
r = [0.0, 0.0]
goal_checker = my_goal_checker_for_tracking
collision_checker = my_collision_checker_for_collision

[my_goal_checker_for_tracking]
type = autorally_cartesian_goal_checker
goal_state = [15.0, 0.0, 0.0, 0.0, 0.0, 3.14, 0.0, 0.0]
goal_radius = 0

[my_goal_checker_for_checking_vehicle_position]
type = autorally_cartesian_goal_checker
goal_state = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, -3.0]
goal_radius = 2.0

[my_collision_checker_for_collision]
type = autorally_collision_checker
track_width = 1.3
obstacles = [[0.3939841091632843, -20.295482635498047], [14.600056648254395, -16.080793380737305], [11.276885032653809, -37.29738998413086], [13.002985000610352, -38.517459869384766], [7.993195056915283, -35.443607330322266], [13.587170600891113, -10.161986351013184], [4.823856830596924, -25.2442684173584], [13.255132675170898, -11.424944877624512], [-6.571404933929443, -5.367563247680664], [25.887577056884766, -28.389236450195312]]
obstacles_radius = [0.7481653530131205, 0.9297785604386081, 0.9936993811503848, 0.7878620962525944, 1.079795798944744, 0.47568345316355887, 0.7836624818606333, 0.9657266391134682, 0.9083093659810106, 0.8515115536825745]
kinematics = my_kinematics1
dynamics = ctrl_dynamics1

[my_collision_checker_for_crash]
type = autorally_collision_checker
track_width = 2
obstacles = [[0.3939841091632843, -20.295482635498047], [14.600056648254395, -16.080793380737305], [11.276885032653809, -37.29738998413086], [13.002985000610352, -38.517459869384766], [7.993195056915283, -35.443607330322266], [13.587170600891113, -10.161986351013184], [4.823856830596924, -25.2442684173584], [13.255132675170898, -11.424944877624512], [-6.571404933929443, -5.367563247680664], [25.887577056884766, -28.389236450195312]]
obstacles_radius = [0.7481653530131205, 0.9297785604386081, 0.9936993811503848, 0.7878620962525944, 1.079795798944744, 0.47568345316355887, 0.7836624818606333, 0.9657266391134682, 0.9083093659810106, 0.8515115536825745]
kinematics = my_kinematics1
dynamics = ctrl_dynamics1

[my_kinematics1]
type = point_kinematics
radius = 0.5

[renderer1]
type = autorally_matplotlib
trajectories_rendering = True
path_rendering = True
xaxis_range = [-20, 40]
yaxis_range = [-50, 10]
figure_size = [9, 9]
figure_dpi = 81
auto_range = False
map_path = environment/dynamics/autorally_dynamics/CCRF_2021-01-10.npz
map_file = CCRF_2021-01-10.npz
track_file_name = ccrf_track_optimal.npz
track_widths = [1.5, 2.0]

